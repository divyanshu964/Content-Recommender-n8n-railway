{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/Content",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -320,
        0
      ],
      "id": "3f86a270-b6ef-4022-bcd5-b8d86be9133a",
      "name": "Webhook",
      "webhookId": "27e6a647-ae9f-42cf-bc35-23fa028ea79d"
    },
    {
      "parameters": {
        "jsCode": "// Input: {\"user_query\": \"...\", \"user_id\": \"...\", \"region\": \"...\"}\nconst query = $json[\"user_query\"] || \"\";\n\n// Extract genres\nlet genres = [];\nif (/comedy/i.test(query)) genres.push(\"Comedy\");\nif (/drama/i.test(query)) genres.push(\"Drama\");\nif (/action/i.test(query)) genres.push(\"Action\");\nif (/romance/i.test(query)) genres.push(\"Romance\");\n\n// Extract languages\nlet languages = [];\nif (/hindi/i.test(query)) languages.push(\"hi\");\nif (/english/i.test(query)) languages.push(\"en\");\n\n// Extract mood\nlet mood = [];\nif (/feel[- ]?good/i.test(query)) mood.push(\"feel-good\");\nif (/dark/i.test(query)) mood.push(\"dark\");\n\n// Preference for TV vs Movie\nlet prefer_tv = /series|show|episodes?/i.test(query);\n\nreturn [\n  {\n    json: {\n      user_id: $json[\"user_id\"],\n      region: $json[\"region\"],\n      genres,\n      languages,\n      mood,\n      prefer_tv,\n      raw_query: query\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -96,
        0
      ],
      "id": "1f044cb4-829c-4af5-a035-6a02b62fa3ab",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "https://tmdbproxy-production.up.railway.app/tv",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        96,
        128
      ],
      "id": "c084fd8b-88c6-47bb-a371-bc2abbfc6cf7",
      "name": "Fetch TV Shows"
    },
    {
      "parameters": {
        "url": "https://tmdbproxy-production.up.railway.app/movies",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        96,
        -128
      ],
      "id": "3c5a2187-47c2-4e84-bd5f-a9d008c2691e",
      "name": "Fetch Movies"
    },
    {
      "parameters": {
        "jsCode": "// Safely handle missing upstream data\nconst movies = items[0]?.json?.results || [];\nconst shows = items[1]?.json?.results || [];\n\nfunction normalize(item, type) {\n  return {\n    id: item.id,\n    type,\n    title: item.title || item.name,\n    year: (item.release_date || item.first_air_date || \"\").split(\"-\")[0],\n    genres: item.genre_ids || [],\n    rating: item.vote_average,\n    overview: item.overview,\n    poster: item.poster_path ? `https://image.tmdb.org/t/p/w500${item.poster_path}` : null,\n    popularity: item.popularity\n  };\n}\n\nreturn [\n  {\n    json: {\n      merged: [\n        ...movies.map(m => normalize(m, \"movie\")),\n        ...shows.map(s => normalize(s, \"tv\"))\n      ]\n    }\n  }\n];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        288,
        0
      ],
      "id": "c4eec256-e38c-4e59-818f-0d78398ce83b",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "const prefs = $json || {};        // user preferences passed along\nconst items = $json.merged || []; // safely get merged items\n\nfunction score(item, prefs) {\n  let s = 0;\n  if (prefs.genres?.some(g => item.genres?.includes(g))) s += 3;\n  if (prefs.languages?.includes(item.original_language || \"\")) s += 2;\n  if (prefs.mood?.length && item.overview?.toLowerCase().includes(\"light\")) s += 1;\n  s += (item.rating || 0) * 0.5;       // weigh IMDb rating\n  s += (item.popularity || 0) * 0.1;   // weigh TMDB popularity\n  return s;\n}\n\n// Rank and take top 5\nconst ranked = items\n  .map(i => ({ ...i, _score: score(i, prefs) }))\n  .sort((a, b) => b._score - a._score)\n  .slice(0, 5); // <-- limit for LLM batching\n\n// Return for next node (LLM or Webhook)\nreturn ranked.map(r => ({ json: r }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        0
      ],
      "id": "1d26b8c0-76ca-4889-a257-32ab176e1e5d",
      "name": "Code2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a movie recommender.\nThe user query was: {{$json.raw_query}}\n\nFor this recommendation:\n- Title: {{$json.title}}\n- Year: {{$json.year}}\n- Genres: {{$json.genres}}\n- Rating: {{$json.rating}}\n- Overview: {{$json.overview}}\n\nWrite 1â€“2 short sentences explaining why this is a good fit.",
        "messages": {
          "messageValues": [
            {
              "message": "You are a movie recommendation explainer."
            },
            {
              "type": "HumanMessagePromptTemplate",
              "message": "=User asked: \"{{$json.raw_query}}\".\nRecommend these top 5 items briefly:\n{{$json.merged.slice(0,5).map(i => `${i.title} (${i.year}) - ${i.overview}`).join(\"\\n\")}}\n\nExplain briefly why this matches."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        672,
        0
      ],
      "id": "4aa9c6a4-fa3c-41b1-abe6-8986b0435053",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        672,
        224
      ],
      "id": "4f4f06bc-2bc0-4470-87e1-cb48a186a6b7",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "aVVZnSnQLRQnZsNR",
          "name": "Content_key"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1024,
        0
      ],
      "id": "8ef54418-ba0e-4f73-92b3-28c2f7fa64a6",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Fetch Movies",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch TV Shows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Movies": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch TV Shows": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "7056fbb2-1329-4373-ba8d-1af5d768289f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1f020a1ff2f02b7a6b81599764b13c253b7aac44d54fea1685f96d76d91648cc"
  },
  "id": "cq9h6CMgA74Uf97W",
  "tags": []
}